# # Tic-tac-toe տախտակը կարող է ներկայացվել որպես 3×3 երկչափ ցուցակ,
# # որտեղ զրոները նշանակում են դատարկ բջիջներ, մեկը՝ X, իսկ երկուսը
# # նշանակում են O: Իրականացնել այդ խաղը օգտագործելով Python List։
# #-------------------------------------------------------------------------------------------
# #    1  2  3  x
# # 1  0  0  0
# # 2  0  0  0
# # 3  0  0  0
# # y
#
#
# def win(tictac):
#     for i in range(3):
#         if tictac[i] == [1,1,1] or tictac[i] == [2,2,2]:
#             return True
#
#     for i in  range(3):
#         if tictac[0][i] == tictac[1][i] and tictac[1][i] == tictac[2][i] and (tictac[2][i] == 1 or tictac[2][i] == 2):
#             return True
#
#
#     if tictac[0][0] == tictac[1][1] and tictac[1][1] == tictac[2][2] and  (tictac[2][2] == 1 or tictac[2][2] == 2):
#         return True
#
#     elif tictac[2][0] == tictac[1][1] and tictac[1][1] == tictac[0][2] and  (tictac[1][1] == 1 or tictac[1][1] == 2) :
#         return True
#
#     else:
#         return False
#
# def printmat(matric):
#
#     for i in range(3):
#         for j in  range(3):
#             print(matric[i][j],end="  ")
#         print()
#
#
# Tictac = [[0,0,0],[0,0,0],[0,0,0]]
#
#
#
# x=0
# y=0
# z=0
# while not win(Tictac):
#     x = int(input("X-"))
#
#     y = int(input("Y-"))
#
#     z = int(input("1 or 2 "))
#
#     Tictac[x-1][y-1] = z
#
#     printmat(Tictac)
#
# print("Win",z)
#
#
# #-------------------------------------------------------------------------------------------
#
# # Իրականացնել պարզ վիկտորինա-խաղ, որը կպարունակի հարցերի և
# # պատասխանների ցուցակներ(lists)։ Խաղը սկսելուց պատահական
# # սկզբունքով հարց պետք է տրվի խաղացողին և պատասխանից կախված
# # խաղի վերջում հայտնվի ճիշտ պատասխանների քանակը։ Հարցերը չպետք է կրկնվեն։
# #-------------------------------------------------------------------------------------------
#
# question =[
#
#     " Что такое структурное программирование?",
#
#     " С именем какого учёного связана технология структурного программирования?",
#
#     " Из каких трёх базовых конструкций состоит любая программа?",
#
#     "Сколько входов и выходов должна иметь каждая из трёх базовых управляющих конструкций?",
#
#     "Каким методом ведётся разработка программы?",
#
#     "Каким методом ведётся разработка подпрограммы?",
#
#     "Как называется алгоритм, который целиком используется в составе другого алгоритма?",
#
#     "Как называется алгоритм, который на каком-либо шаге обращается сам к себе?",
#
#     "Как называется подпрограмма, которая имеет произвольное количество входных и выходных данных?",
#
#     "Что называется функцией?"
# ]
#
# answer =[
#
#     [
# "Технология разработки программного обеспечения, основой которой служит представление"
# "программы в виде математических формул и символов естественного языка",
#
# "Технология разработки программного обеспечения, основой которой служит"
# " представление программы в виде иерархической конструкции логических целостных фрагментов",
#
# "Технология разработки программного обеспечения, основой которой "
# "служит представление программы в виде логарифмических уравнений"
#
#     ]
# ,
#     [
#     "С именем Эдсгера Дейкстры",
#
#     "С именем Линуса Торвальдса",
#
#     "С именем Блёза Паскаля"
#     ]
# ,
#     [
# "Последовательности, реструкции, вспомогательной конструкции",
#
# "Последовательности, ветвления, цикла",
#
# "Последовательности, разветвления, реструкции",
#
#     ]
# ,
#
#     [
# "Один вход и один выход",
#
# "Один вход и два выхода",
#
# "Два входа и два выхода",
#
#     ]
#     ,
#     [
# "Методом «снизу вверх»",
#
# "Методом «слева направо»",
#
# "Методом «сверху вниз»",
#
#     ]
#     ,
#     [
# "Методом, отличным от метода основной программы",
#
# "Тем же методом, что и основной программы",
#
# "Методом «снизу вверх»",
#
#     ]
#     ,
#     [
# "циклический",
#
# "служебный",
#
# "вспомогательный",
#
#     ]
#     ,
#     [
# "рекурсивным",
#
# "циклическим",
#
# "вспомогательным",
#
#     ]
#     ,
#     [
# "функция",
#
# "алгоритм",
#
# "процедура",
#
#     ]
#     ,
#     [
# "Подпрограмма, которая имеет произвольное количество входных и выходных данных",
#
# "Подпрограмма, которая имеет единственный результат, "
# "записываемый в ячейку памяти, имя которой совпадает с именем подпрограммы",
#
# "Подпрограмма, которая небольшое количество входных и выходных данных,"
# "записываемое в ячейку памяти, имя которой не совпадает с именем подпрограммы"
#
#     ]
# ]
#
# correct_answer = {0:1, 1:0, 2:1, 3:0, 4:2, 5:1, 6:2, 7:0, 8:2, 9:1}
# score = 0
# for i in range(10):
#     print(f"{i+1}))",end=' ')
#     print(question[i])
#     print()
#     for j in range(3):
#         print(f"{j+1})",answer[i][j])
#
#         print()
#     x = int(input("Enter right answer - "))
#
#     if x-1 == correct_answer[i]:
#         score += 1
#
#     print()
#
#
# print(f"you scored {score} points")


# #-------------------------------------------------------------------------------------------
# # Իրականացնել ծրագիր, որտեղ կօգտագործվեն բոլոր այն
# # ներդրված օբյեկտների մեթոդները, որոնք անցել ենք (number, string, list, tuple)։
print('number')
a=5
print(a.as_integer_ratio())
print(a.bit_count())
print(a.bit_length())
z = 3 + 4j

text = 'Hello World'

print("String")

print(text.count('l'))

print(text.lower())

print(text.upper())

print(text.replace('l','a'))

text = '  hello world'
print(text.title())

ls = text.split(' ')

print(ls)

text = 'HeLlo WoRlD'
print(text.swapcase())

print('List')

ls = [1,2,3,4,5,1,2]

print(ls)

ls.append(15)
print(ls)

ls1 = ls.copy()
print(ls1)

print(ls.count(2))

ls.extend([1,2,3])
print(ls)

print(ls.index(3))

ls.insert(2,111)
print(ls)

ls.pop()
print(ls)

ls.remove(111)
print(ls)

ls.reverse()
print(ls)

ls.sort()
print(ls)



ls.clear()

print(ls)

print("Taple")

tp = (1,2,3,4)

print(tp.count(1))

print(tp.index(3))














